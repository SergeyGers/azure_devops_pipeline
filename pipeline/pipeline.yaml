trigger:
- master

pool:
  name: 'Default'
  demands:
    - agent.name -equals Sergeys-MacBook-Air

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.401'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore and build the project
- script: |
    cd $(Build.SourcesDirectory)/HelloWorldApp
    dotnet restore --interactive
    dotnet build --configuration Release
  displayName: 'Restore and Build Project'

# Pack the project with a unique version
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    projects: '$(Build.SourcesDirectory)/HelloWorldApp/HelloWorldApp.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)'  # Pack the package to the artifact staging directory
    arguments: '--configuration Release /p:Version=1.0.0-$(Build.BuildId)'  # Use unique version for each build
  displayName: 'Create NuGet Package with Build Version'

# Push the package to Azure Artifacts, skipping duplicates
- script: |
    dotnet nuget push $(Build.ArtifactStagingDirectory)/*.nupkg --source "https://pkgs.dev.azure.com/sergeygershov/_packaging/sergeygershov/nuget/v3/index.json" --api-key $(NUGET_API_KEY) --skip-duplicate
  displayName: 'Push Package to Azure Artifacts'

# Publish the package as a pipeline artifact for review or debugging
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'  # This is where the .nupkg file is stored
    artifactName: 'HelloWorldAppPackage'  # Name the pipeline artifact
    publishLocation: 'Pipeline'  # Store the artifact in the pipeline for download
  displayName: 'Publish NuGet Package as Pipeline Artifact'

